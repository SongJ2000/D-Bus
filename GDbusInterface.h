/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GDBUSINTERFACE_H__
#define __GDBUSINTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for gdbus.demo */

#define TYPE_GDBUS_DEMO (gdbus_demo_get_type ())
#define GDBUS_DEMO(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_GDBUS_DEMO, GdbusDemo))
#define IS_GDBUS_DEMO(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_GDBUS_DEMO))
#define GDBUS_DEMO_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_GDBUS_DEMO, GdbusDemoIface))

struct _GdbusDemo;
typedef struct _GdbusDemo GdbusDemo;
typedef struct _GdbusDemoIface GdbusDemoIface;

struct _GdbusDemoIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_method_set_double) (
    GdbusDemo *object,
    GDBusMethodInvocation *invocation,
    gdouble arg_input);

  gboolean (*handle_method_set_string) (
    GdbusDemo *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_input);

  void (*signal_send_double) (
    GdbusDemo *object,
    gdouble arg_input);

  void (*signal_send_string) (
    GdbusDemo *object,
    const gchar *arg_input);

};

GType gdbus_demo_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdbus_demo_interface_info (void);
guint gdbus_demo_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdbus_demo_complete_method_set_string (
    GdbusDemo *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);

void gdbus_demo_complete_method_set_double (
    GdbusDemo *object,
    GDBusMethodInvocation *invocation,
    gdouble response);



/* D-Bus signal emissions functions: */
void gdbus_demo_emit_signal_send_string (
    GdbusDemo *object,
    const gchar *arg_input);

void gdbus_demo_emit_signal_send_double (
    GdbusDemo *object,
    gdouble arg_input);



/* D-Bus method calls: */
void gdbus_demo_call_method_set_string (
    GdbusDemo *proxy,
    const gchar *arg_input,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_demo_call_method_set_string_finish (
    GdbusDemo *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_demo_call_method_set_string_sync (
    GdbusDemo *proxy,
    const gchar *arg_input,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);

void gdbus_demo_call_method_set_double (
    GdbusDemo *proxy,
    gdouble arg_input,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_demo_call_method_set_double_finish (
    GdbusDemo *proxy,
    gdouble *out_response,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_demo_call_method_set_double_sync (
    GdbusDemo *proxy,
    gdouble arg_input,
    gdouble *out_response,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_GDBUS_DEMO_PROXY (gdbus_demo_proxy_get_type ())
#define GDBUS_DEMO_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_GDBUS_DEMO_PROXY, GdbusDemoProxy))
#define GDBUS_DEMO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_GDBUS_DEMO_PROXY, GdbusDemoProxyClass))
#define GDBUS_DEMO_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_GDBUS_DEMO_PROXY, GdbusDemoProxyClass))
#define IS_GDBUS_DEMO_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_GDBUS_DEMO_PROXY))
#define IS_GDBUS_DEMO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_GDBUS_DEMO_PROXY))

typedef struct _GdbusDemoProxy GdbusDemoProxy;
typedef struct _GdbusDemoProxyClass GdbusDemoProxyClass;
typedef struct _GdbusDemoProxyPrivate GdbusDemoProxyPrivate;

struct _GdbusDemoProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdbusDemoProxyPrivate *priv;
};

struct _GdbusDemoProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdbus_demo_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdbusDemoProxy, g_object_unref)
#endif

void gdbus_demo_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdbusDemo *gdbus_demo_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdbusDemo *gdbus_demo_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdbus_demo_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdbusDemo *gdbus_demo_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdbusDemo *gdbus_demo_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_GDBUS_DEMO_SKELETON (gdbus_demo_skeleton_get_type ())
#define GDBUS_DEMO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_GDBUS_DEMO_SKELETON, GdbusDemoSkeleton))
#define GDBUS_DEMO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_GDBUS_DEMO_SKELETON, GdbusDemoSkeletonClass))
#define GDBUS_DEMO_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_GDBUS_DEMO_SKELETON, GdbusDemoSkeletonClass))
#define IS_GDBUS_DEMO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_GDBUS_DEMO_SKELETON))
#define IS_GDBUS_DEMO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_GDBUS_DEMO_SKELETON))

typedef struct _GdbusDemoSkeleton GdbusDemoSkeleton;
typedef struct _GdbusDemoSkeletonClass GdbusDemoSkeletonClass;
typedef struct _GdbusDemoSkeletonPrivate GdbusDemoSkeletonPrivate;

struct _GdbusDemoSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdbusDemoSkeletonPrivate *priv;
};

struct _GdbusDemoSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdbus_demo_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdbusDemoSkeleton, g_object_unref)
#endif

GdbusDemo *gdbus_demo_skeleton_new (void);


G_END_DECLS

#endif /* __GDBUSINTERFACE_H__ */
